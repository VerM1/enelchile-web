!function(e){"use strict";function t(e,t){e=String(e).replace(/[^\dk]+/gi,"");var r=e.substr(-1,1),n=e.substr(0,e.length-1).replace(/\D+/g,"");return t?[n,r]:n+r}function r(e){if(e=t(e),e.length<3)return e;var r=t(e,!0);return r[0]=r[0].replace(/(\d)(?=(\d{3})+\b)/g,"$1."),r.join("-")}function n(e){if(!e||!String(e).length)return!0;var r=t(e,!0),n="k",u=0,i=1;for(isNaN(r[1])&&(r[1]=n);r[0];r[0]=Math.floor(Number(r[0])/10))i=(i+r[0]%10*(9-u++%6))%11;return i?String(i-1)===r[1]:n===r[1]}e.module("ngRut",[]).factory("ngRut",function(){return{validate:n,format:r,clean:t}}).directive("ngRut",["$log",function(e){return{restrict:"A",require:"ngModel",link:function(u,i,a,o){return"INPUT"!==i[0].tagName?void e.error("This directive must be used on INPUT elements only and element is %s",i[0].tagName):o?(o.$formatters.unshift(function(e){return o.$setValidity("rut",n(e)),r(o.$modelValue)}),void o.$parsers.unshift(function(e){return o.$setValidity("rut",n(e)),o.$setViewValue(r(e)),o.$render(),t(e)})):void e.warn("A model should be assigned to the input element!")}}}]).filter("ngRut",function(){return function(e,u){switch(u){case"validate":return n(e);case"clean":return t(e);default:return r(e)}}})}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLXJ1dC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwiY2xlYW4iLCJ2YWx1ZSIsInBhcnRzIiwiU3RyaW5nIiwicmVwbGFjZSIsInZlcmlmaWVyIiwic3Vic3RyIiwiZGlnaXRzIiwibGVuZ3RoIiwiZm9ybWF0Iiwiam9pbiIsInZhbGlkYXRlIiwiayIsIm0iLCJyIiwiaXNOYU4iLCJNYXRoIiwiZmxvb3IiLCJOdW1iZXIiLCJtb2R1bGUiLCJmYWN0b3J5IiwiZGlyZWN0aXZlIiwiJGxvZyIsInJlc3RyaWN0IiwicmVxdWlyZSIsImxpbmsiLCIkc2NvcGUiLCIkZWxlbWVudCIsIiRhdHRycyIsIm5nTW9kZWwiLCJ0YWdOYW1lIiwiZXJyb3IiLCIkZm9ybWF0dGVycyIsInVuc2hpZnQiLCIkc2V0VmFsaWRpdHkiLCIkbW9kZWxWYWx1ZSIsIiRwYXJzZXJzIiwiJHNldFZpZXdWYWx1ZSIsIiRyZW5kZXIiLCJ3YXJuIiwiZmlsdGVyIiwiYWN0aW9uIl0sIm1hcHBpbmdzIjoiQ0FBQyxTQUFVQSxHQUNULFlBU0EsU0FBU0MsR0FBTUMsRUFBT0MsR0FFcEJELEVBQVFFLE9BQU9GLEdBQU9HLFFBQVEsWUFBYSxHQUczQyxJQUFJQyxHQUFXSixFQUFNSyxPQUFPLEdBQUksR0FHNUJDLEVBQVNOLEVBQU1LLE9BQU8sRUFBR0wsRUFBTU8sT0FBUyxHQUFHSixRQUFRLE9BQVEsR0FHL0QsT0FBSUYsSUFDTUssRUFBUUYsR0FJWEUsRUFBU0YsRUFTbEIsUUFBU0ksR0FBT1IsR0FJZCxHQUhBQSxFQUFRRCxFQUFNQyxHQUdWQSxFQUFNTyxPQUFTLEVBQ2pCLE1BQU9QLEVBR1QsSUFBSUMsR0FBUUYsRUFBTUMsR0FBTyxFQUt6QixPQUZBQyxHQUFNLEdBQUtBLEVBQU0sR0FBR0UsUUFBUSxzQkFBdUIsT0FFNUNGLEVBQU1RLEtBQUssS0FTcEIsUUFBU0MsR0FBU1YsR0FFaEIsSUFBS0EsSUFBVUUsT0FBT0YsR0FBT08sT0FDM0IsT0FBTyxDQUdULElBQUlOLEdBQVFGLEVBQU1DLEdBQU8sR0FDckJXLEVBQUksSUFDSkMsRUFBSSxFQUNKQyxFQUFJLENBUVIsS0FMSUMsTUFBTWIsRUFBTSxNQUNkQSxFQUFNLEdBQUtVLEdBSU5WLEVBQU0sR0FBSUEsRUFBTSxHQUFLYyxLQUFLQyxNQUFNQyxPQUFPaEIsRUFBTSxJQUFNLElBQ3hEWSxHQUFLQSxFQUFJWixFQUFNLEdBQUssSUFBTSxFQUFJVyxJQUFNLElBQU0sRUFJNUMsT0FBSUMsR0FDS1gsT0FBT1csRUFBSSxLQUFPWixFQUFNLEdBSTFCVSxJQUFNVixFQUFNLEdBSXJCSCxFQUFRb0IsT0FBTyxZQUdmQyxRQUFRLFFBQVMsV0FDZixPQUNFVCxTQUFVQSxFQUNWRixPQUFRQSxFQUNSVCxNQUFPQSxLQUtYcUIsVUFBVSxTQUNSLE9BRUEsU0FBVUMsR0FFUixPQUVFQyxTQUFVLElBR1ZDLFFBQVMsVUFFVEMsS0FBTSxTQUFVQyxFQUFRQyxFQUFVQyxFQUFRQyxHQUV4QyxNQUE0QixVQUF4QkYsRUFBUyxHQUFHRyxZQUNkUixHQUFLUyxNQUFNLHVFQUF3RUosRUFBUyxHQUFHRyxTQUs1RkQsR0FNTEEsRUFBUUcsWUFBWUMsUUFBUSxTQUFVaEMsR0FHcEMsTUFGQTRCLEdBQVFLLGFBQWEsTUFBT3ZCLEVBQVNWLElBRTlCUSxFQUFPb0IsRUFBUU0sbUJBSXhCTixHQUFRTyxTQUFTSCxRQUFRLFNBQVVoQyxHQUtqQyxNQUpBNEIsR0FBUUssYUFBYSxNQUFPdkIsRUFBU1YsSUFDckM0QixFQUFRUSxjQUFjNUIsRUFBT1IsSUFDN0I0QixFQUFRUyxVQUVEdEMsRUFBTUMsVUFqQmJxQixHQUFLaUIsS0FBSyx5REEwQnBCQyxPQUFPLFFBQVMsV0FDZCxNQUFPLFVBQVV2QyxFQUFPd0MsR0FDdEIsT0FBUUEsR0FDTixJQUFLLFdBQ0gsTUFBTzlCLEdBQVNWLEVBRWxCLEtBQUssUUFDSCxNQUFPRCxHQUFNQyxFQUVmLFNBQ0UsTUFBT1EsR0FBT1IsUUFLdEJGIiwiZmlsZSI6Im5nLXJ1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENsZWFuIGEgc3RyaW5nIG91dCBvZiBpbnZhbGlkIFJVVCBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIGNsZWFuLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHBhcnRzIElmIHRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIHBhcnRzIGluc3RlYWQuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGNsZWFuZWQgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gY2xlYW4odmFsdWUsIHBhcnRzKSB7XG4gICAgLyogRW5zdXJlIHZhbHVlIGlzIGEgc3RyaW5nIGFuZCBrZWVwIG9ubHkgbnVtYmVycyBhbmQgJ2snIG9yICdLJyAqL1xuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9bXlxcZGtdKy9naSwgJycpO1xuXG4gICAgLyogT2J0YWluIHRoZSB2ZXJpZmllciBkaWdpdCAqL1xuICAgIHZhciB2ZXJpZmllciA9IHZhbHVlLnN1YnN0cigtMSwgMSk7XG5cbiAgICAvKiBPYnRhaW4gdGhlIFJVVCBkaWdpdHMgYW5kIGtlZXAgb25seSBudW1iZXJzICovXG4gICAgdmFyIGRpZ2l0cyA9IHZhbHVlLnN1YnN0cigwLCB2YWx1ZS5sZW5ndGggLSAxKS5yZXBsYWNlKC9cXEQrL2csICcnKTtcblxuICAgIC8qIFJldHVybiBhcnJheSBvZiBwYXJ0cy4uLiAqL1xuICAgIGlmIChwYXJ0cykge1xuICAgICAgcmV0dXJuIFtkaWdpdHMsIHZlcmlmaWVyXTtcbiAgICB9XG5cbiAgICAvKiAuLi4gb3IgcmV0dXJuIGEgc3RyaW5nICovXG4gICAgcmV0dXJuIGRpZ2l0cyArIHZlcmlmaWVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdHMgYSBzdHJpbmcgYXMgYSBSVVQgbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIGZvcm1hdC5cbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgZm9ybWF0dGVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgIHZhbHVlID0gY2xlYW4odmFsdWUpO1xuXG4gICAgLyogQ2hlY2sgaWYgdmFsdWUgaXMgdG9vIHNob3J0IHRvIGZvcm1hdCAqL1xuICAgIGlmICh2YWx1ZS5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcnRzID0gY2xlYW4odmFsdWUsIHRydWUpO1xuXG4gICAgLyogR3JvdXAgZGlnaXRzIHdpdGggZG90cyAqL1xuICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvKFxcZCkoPz0oXFxkezN9KStcXGIpL2csICckMS4nKTtcblxuICAgIHJldHVybiBwYXJ0cy5qb2luKCctJyk7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIGEgc3RyaW5nIGZvciBhIHZhbGlkIFJVVCBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBUaGUgc3RyaW5nIHRvIHZhbGlkYXRlLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBJZiB0aGUgc3RyaW5nIGlzIGEgdmFsaWQgUlVUIG51bWJlci5cbiAgICovXG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHZhbHVlKSB7XG4gICAgLyogQ2hlY2sgaWYgdGhlcmUncyBhIHZhbHVlIHRvIHZhbGlkYXRlICovXG4gICAgaWYgKCF2YWx1ZSB8fCAhU3RyaW5nKHZhbHVlKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBwYXJ0cyA9IGNsZWFuKHZhbHVlLCB0cnVlKTtcbiAgICB2YXIgayA9ICdrJztcbiAgICB2YXIgbSA9IDA7XG4gICAgdmFyIHIgPSAxO1xuXG4gICAgLyogSWYgdGhlIHZlcmlmaWVyIGlzIG5vdCBhIG51bWJlciB0aGVuIGl0IG11c3QgYmUgJ2snICovXG4gICAgaWYgKGlzTmFOKHBhcnRzWzFdKSkge1xuICAgICAgcGFydHNbMV0gPSBrO1xuICAgIH1cblxuICAgIC8qIERvIHRoZSBtYXRoIDopICovXG4gICAgZm9yICg7IHBhcnRzWzBdOyBwYXJ0c1swXSA9IE1hdGguZmxvb3IoTnVtYmVyKHBhcnRzWzBdKSAvIDEwKSkge1xuICAgICAgciA9IChyICsgcGFydHNbMF0gJSAxMCAqICg5IC0gbSsrICUgNikpICUgMTE7XG4gICAgfVxuXG4gICAgLyogQ2hlY2sgaWYgdGhlIFJVVCBpcyB2YWxpZCBhZ2FpbnN0IHRoZSByZXN1bHQuLi4gKi9cbiAgICBpZiAocikge1xuICAgICAgcmV0dXJuIFN0cmluZyhyIC0gMSkgPT09IHBhcnRzWzFdO1xuICAgIH1cblxuICAgIC8qIC4uLiBvciBhZ2FpbnN0ICdrJyAqL1xuICAgIHJldHVybiBrID09PSBwYXJ0c1sxXTtcbiAgfVxuXG4gIC8qIERlZmluZSB0aGUgQW5ndWxhciBtb2R1bGUgKi9cbiAgYW5ndWxhci5tb2R1bGUoJ25nUnV0JywgW10pLlxuXG4gIC8qIENyZWF0ZSB0aGUgc2VydmljZSAqL1xuICBmYWN0b3J5KCduZ1J1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlLFxuICAgICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgICBjbGVhbjogY2xlYW5cbiAgICB9O1xuICB9KS5cblxuICAvKiBDcmVhdGUgdGhlIGRpcmVjdGl2ZSAqL1xuICBkaXJlY3RpdmUoJ25nUnV0JywgW1xuICAgICckbG9nJyxcblxuICAgIGZ1bmN0aW9uICgkbG9nKSB7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8qIFJlc3RyaWN0IHRvIGFuIGF0dHJpYnV0ZSB0eXBlICovXG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG5cbiAgICAgICAgLyogRWxlbWVudCBtdXN0IGhhdmUgbmctbW9kZWwgYXR0cmlidXRlICovXG4gICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcblxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgLyogQ2hlY2sgaWYgJGVsZW1lbnQgaXMgYW4gaW5wdXQgKi9cbiAgICAgICAgICBpZiAoJGVsZW1lbnRbMF0udGFnTmFtZSAhPT0gJ0lOUFVUJykge1xuICAgICAgICAgICAgJGxvZy5lcnJvcihcIlRoaXMgZGlyZWN0aXZlIG11c3QgYmUgdXNlZCBvbiBJTlBVVCBlbGVtZW50cyBvbmx5IGFuZCBlbGVtZW50IGlzICVzXCIsICRlbGVtZW50WzBdLnRhZ05hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qIENoZWNrIGlmIHRoZSAkZWxlbWVudCBoYXMgYW4gYXNzb2NpYXRlZCBtb2RlbCAqL1xuICAgICAgICAgIGlmICghbmdNb2RlbCkge1xuICAgICAgICAgICAgJGxvZy53YXJuKFwiQSBtb2RlbCBzaG91bGQgYmUgYXNzaWduZWQgdG8gdGhlIGlucHV0IGVsZW1lbnQhXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qIE1vZGVsIGZvcm1hdHRlciAqL1xuICAgICAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMudW5zaGlmdChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIG5nTW9kZWwuJHNldFZhbGlkaXR5KCdydXQnLCB2YWxpZGF0ZSh2YWx1ZSkpO1xuXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0KG5nTW9kZWwuJG1vZGVsVmFsdWUpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLyogTW9kZWwgcGFyc2VyICovXG4gICAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3J1dCcsIHZhbGlkYXRlKHZhbHVlKSk7XG4gICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoZm9ybWF0KHZhbHVlKSk7XG4gICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIoKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNsZWFuKHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgIH1cbiAgXSkuXG5cbiAgLyogQ3JlYXRlIHRoZSBmaWx0ZXIgKi9cbiAgZmlsdGVyKCduZ1J1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBhY3Rpb24pIHtcbiAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3ZhbGlkYXRlJzpcbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGUodmFsdWUpO1xuXG4gICAgICAgIGNhc2UgJ2NsZWFuJzpcbiAgICAgICAgICByZXR1cm4gY2xlYW4odmFsdWUpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbn0oYW5ndWxhcikpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9